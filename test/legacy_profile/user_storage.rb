#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'profile_types'

module UserStorage
  class Client
    include ::Thrift::Client

    def store(xuser)
      send_store(xuser)
      recv_store()
    end

    def send_store(xuser)
      send_message('store', Store_args, :xuser => xuser)
    end

    def recv_store()
      result = receive_message(Store_result)
      return
    end

    def retrieve(xuid)
      send_retrieve(xuid)
      return recv_retrieve()
    end

    def send_retrieve(xuid)
      send_message('retrieve', Retrieve_args, :xuid => xuid)
    end

    def recv_retrieve()
      result = receive_message(Retrieve_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieve failed: unknown result')
    end

    def set_map(m)
      send_set_map(m)
      recv_set_map()
    end

    def send_set_map(m)
      send_message('set_map', Set_map_args, :m => m)
    end

    def recv_set_map()
      result = receive_message(Set_map_result)
      return
    end

    def last_map()
      send_last_map()
      return recv_last_map()
    end

    def send_last_map()
      send_message('last_map', Last_map_args)
    end

    def recv_last_map()
      result = receive_message(Last_map_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'last_map failed: unknown result')
    end

    def set_list(l)
      send_set_list(l)
      recv_set_list()
    end

    def send_set_list(l)
      send_message('set_list', Set_list_args, :l => l)
    end

    def recv_set_list()
      result = receive_message(Set_list_result)
      return
    end

    def last_list()
      send_last_list()
      return recv_last_list()
    end

    def send_last_list()
      send_message('last_list', Last_list_args)
    end

    def recv_last_list()
      result = receive_message(Last_list_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'last_list failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_store(seqid, iprot, oprot)
      args = read_args(iprot, Store_args)
      result = Store_result.new()
      @handler.store(args.xuser)
      write_result(result, oprot, 'store', seqid)
    end

    def process_retrieve(seqid, iprot, oprot)
      args = read_args(iprot, Retrieve_args)
      result = Retrieve_result.new()
      result.success = @handler.retrieve(args.xuid)
      write_result(result, oprot, 'retrieve', seqid)
    end

    def process_set_map(seqid, iprot, oprot)
      args = read_args(iprot, Set_map_args)
      result = Set_map_result.new()
      @handler.set_map(args.m)
      write_result(result, oprot, 'set_map', seqid)
    end

    def process_last_map(seqid, iprot, oprot)
      args = read_args(iprot, Last_map_args)
      result = Last_map_result.new()
      result.success = @handler.last_map()
      write_result(result, oprot, 'last_map', seqid)
    end

    def process_set_list(seqid, iprot, oprot)
      args = read_args(iprot, Set_list_args)
      result = Set_list_result.new()
      @handler.set_list(args.l)
      write_result(result, oprot, 'set_list', seqid)
    end

    def process_last_list(seqid, iprot, oprot)
      args = read_args(iprot, Last_list_args)
      result = Last_list_result.new()
      result.success = @handler.last_list()
      write_result(result, oprot, 'last_list', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Store_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    XUSER = 1

    FIELDS = {
      XUSER => {:type => ::Thrift::Types::STRUCT, :name => 'xuser', :class => UserProfile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Store_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Retrieve_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    XUID = 1

    FIELDS = {
      XUID => {:type => ::Thrift::Types::I32, :name => 'xuid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Retrieve_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => UserProfile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_map_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M = 1

    FIELDS = {
      M => {:type => ::Thrift::Types::MAP, :name => 'm', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_map_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Last_map_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Last_map_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_list_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    L = 1

    FIELDS = {
      L => {:type => ::Thrift::Types::LIST, :name => 'l', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Set_list_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Last_list_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Last_list_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

